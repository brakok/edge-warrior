var TimeZone = function(x, y){	this.x = x;	this.y = y;		this.spawnAnimation = AnimationManager.create('TimeZone_spawn', 0, 7, 24);		this.currentAnimation = cc.Sprite.createWithSpriteFrameName('TimeZone_spawn.0000.png');	this.currentAnimation.setZOrder(Constants.Trigger.Z_ORDER);			this.currentAnimation.runAction(cc.Sequence.create(this.spawnAnimation));	this.executeTimer = 0;	this.isExecuting = false;		Client.game.layer.addChild(this.currentAnimation);		//Start effects.	AudioManager.playEffect(Constants.Sound.File.TimeZone.SPAWN, false);};TimeZone.prototype.render = function(){	Client.game.camera.project(this.currentAnimation, this.x, this.y);};TimeZone.prototype.update = function(dt){	//Darken when keeping new item.	if(this.executeTimer > 0)	{		var factor = (Constants.Trigger.TimeZone.EXEC_TIMER - this.executeTimer)/Constants.Trigger.TimeZone.EXEC_TIMER*255;		this.currentAnimation.setColor(new cc.Color3B(factor,factor,factor));				this.executeTimer -= dt;	}	else if(this.isExecuting)	{		this.isExecuting = false;		this.currentAnimation.setColor(new cc.Color3B(255,255,255));	}};TimeZone.prototype.execute = function(type){	this.executeTimer = Constants.Trigger.TimeZone.EXEC_TIMER;	this.isExecuting = true;};TimeZone.prototype.explode = function(){	Client.game.layer.removeChild(this.currentAnimation);			AudioManager.playEffect(Constants.Sound.File.TimeZone.DISAPPEARING, false);	EffectManager.create(Enum.Effect.Type.TIME_ZONE_DISAPPEARING, this.x, this.y);};TimeZone.prototype.setPosition = function(x, y){	this.x = x;	this.y = y;};TimeZone.prototype.fromServer = function(remote){	this.setPosition(remote.x, remote.y);};