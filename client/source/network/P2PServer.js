var P2PServer = function(udpPort, clientUdpPort, tcpPort){		var that = this;	this.serverSocketId = null;	this.udpSocketId = null;		this.udpPort = udpPort;	this.tcpPort = tcpPort;	this.clientUdpPort = clientUdpPort;		this.sockets = [];	this.onRegister = function(){};		function onReceive(info){			var data = NetworkHelper.deserialize(info.data);		console.log(data);				for(var i = 0; i < this.sockets.length; i++)			if(this.sockets[i].serverSocketId == info.socketId)			{				this.sockets[i].onTransfer(data);				return;			}	}		function onAccept(info){		if(info.socketId != that.serverSocketId)			return;				var socket = new P2PSocket(that.udpPort, that.tcpPort);				//Get IP address.		chrome.sockets.tcp.getInfo(info.clientSocketId, function(clientInfo){			socket.register(clientInfo.peerAddress, that.udpSocketId, that.clientUdpPort, info.clientSocketId);						that.onRegister(socket);			that.sockets.push(socket);			chrome.sockets.tcp.onReceive.addListener(onReceive);			chrome.sockets.tcp.setPaused(info.clientSocketId, false);			socket.emit(Constants.Message.CONNECTION, {clientSocketId: info.clientSocketId}, true);		});	}		//Create UDP socket.	chrome.sockets.udp.create({}, function(socketInfo){		that.udpSocketId = socketInfo.socketId;				chrome.sockets.udp.onReceive.addListener(onReceive);		chrome.sockets.udp.bind(that.udpSocketId, "0.0.0.0", that.udpPort, function(result){			if(result < 0){				console.log("Error when binding udp socket");				return;			}		});	});		//Open TCP server.	chrome.sockets.tcpServer.create({}, function(createInfo){		that.serverSocketId = createInfo.socketId;		chrome.sockets.tcpServer.setPaused(createInfo.socketId, false);				//Listen on localhost at specified port.		chrome.sockets.tcpServer.listen(that.serverSocketId, "127.0.0.1", that.tcpPort, function(resultCode){			if(resultCode < 0)			{				console.log("Error when creating TCP server:" + chrome.runtime.lastError.message);				return;			}			else				console.log('TCP server up');						chrome.sockets.tcpServer.onAccept.addListener(onAccept);		});	});		};P2PServer.prototype.register = function(callback){	this.onRegister = callback;};