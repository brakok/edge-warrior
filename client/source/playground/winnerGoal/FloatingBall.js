var FloatingBall = function(x, y){	this.x = x;	this.y = y;		//Callback restoring idle animation.	this.actionCallback = cc.CallFunc.create(function(node){								this.swapAnimation(Enum.Anim.Type.IDLE);								this.currentAction = Enum.Anim.Type.IDLE;							}, this);};FloatingBall.prototype.init = function(){		this.currentAnimationType = Enum.Anim.Type.ATTRACT;		this.currentAction = Enum.Action.Type.STANDING;		//Base frame.	this.currentAnimation = cc.Sprite.createWithSpriteFrameName('floatingBall_attract.0000.png');	this.setPosition(this.x, this.y);	this.currentAnimation._zOrder = Constants.WinningGoal.FloatingBall.Z_INDEX;		//Creation of the animations.	this.attractAnimation = AnimationManager.create('floatingBall_attract', 0, 24, 24);	this.idleAnimation = AnimationManager.create('floatingBall_idle', 24, 48, 24);	this.actionAnimation = AnimationManager.create('floatingBall_action', 48, 72, 24);		this.currentAnimation.runAction(cc.RepeatForever.create(this.attractAnimation));	Client.game.layer.addChild(this.currentAnimation);};FloatingBall.prototype.setPosition = function(x, y){	this.x = x;	this.y = y;};FloatingBall.prototype.update = function(){	Client.game.camera.project(this.currentAnimation, this.x, this.y);};//Beginning of winner phase.FloatingBall.prototype.activate = function(){	this.swapAnimation(Enum.Anim.Type.IDLE);		//Loop floating noise for the ball.	AudioManager.playEffect(Constants.Sound.File.WinningGoal.FloatingBall.IDLE, true);};//Process done at the end of the winner phase.FloatingBall.prototype.end = function(){	AudioManager.stopEffect(Constants.Sound.File.WinningGoal.FloatingBall.IDLE);};FloatingBall.prototype.execute = function(actionType){	switch(actionType)	{		case Enum.Action.Type.SUMMONING:			this.swapAnimation(Enum.Anim.Type.SUMMONING);						AudioManager.playVoice(Constants.Sound.File.WinningGoal.FloatingBall.SUMMON, false);			break;	}	this.currentAction = actionType;};FloatingBall.prototype.swapAnimation = function(animType){		Client.game.layer.removeChild(this.currentAnimation);		switch(animType)	{		case Enum.Anim.Type.IDLE:			this.currentAnimation.runAction(cc.RepeatForever.create(this.idleAnimation));			break;		case Enum.Anim.Type.SUMMONING:			//Create a sequence that will restore idle animation at the end.			this.currentAnimation.runAction(cc.Sequence.create(this.actionAnimation, this.actionCallback));			break;		case Enum.Anim.Type.ATTRACT:			this.currentAnimation.runAction(cc.RepeatForever.create(this.attractAnimation));			break;	}		this.currentAnimationType = animType;		Client.game.layer.addChild(this.currentAnimation);};FloatingBall.prototype.fromServer = function(data){		this.setPosition(data.x, data.y);};