var GravityBeam = function(x, y){	this.x = x;	this.y = y;		this.sprite = cc.Sprite.create(assetsTriggerDir + 'GravityBeam.png');	this.sprite.setPosition(this.x, this.y);	this.sprite.setZOrder(Constants.Trigger.Z_ORDER);		this.sprite.setScaleX(0);	this.scaleTimer = Constants.Trigger.GravityBeam.SCALE_TIMER;		Client.game.layer.addChild(this.sprite);		this.trail = ParticleManager.create(Enum.Particles.LIL_BEAM, this.x, this.y, Client.game.layer);	this.trailIsRunning = false;		//Start effects.	AudioManager.playEffect(Constants.Sound.File.GravityBeam.SPAWN, false);};GravityBeam.prototype.render = function(){	var scale = 1;	if(this.scaleTimer > 0)		scale = 1 - this.scaleTimer/Constants.Trigger.GravityBeam.SCALE_TIMER;		Client.game.camera.project(this.sprite, this.x, this.y, scale, 1);};GravityBeam.prototype.update = function(dt){	if(this.scaleTimer > 0)		this.scaleTimer -= dt;	else if(!this.trailIsRunning)	{		this.trail.run();		this.trailIsRunning = true;	}		};GravityBeam.prototype.execute = function(type){};GravityBeam.prototype.explode = function(){	this.trail.stop();	this.scaleTimer = Constants.Trigger.GravityBeam.SCALE_TIMER;	var that = this;		that.sprite.schedule(function(dt){			that.scaleTimer -= dt;			if(that.scaleTimer > 0)			Client.game.camera.project(that.sprite, that.x, that.y, that.scaleTimer/Constants.Trigger.GravityBeam.SCALE_TIMER, 1);		else			Client.game.layer.removeChild(that.sprite);	});};GravityBeam.prototype.setPosition = function(x, y){	this.x = x;	this.y = y;};GravityBeam.prototype.fromServer = function(remote){	this.setPosition(remote.x, remote.y);};