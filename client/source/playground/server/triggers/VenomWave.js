cd.Server.VenomWave = function(x, y, speedX, speedY, distance, cooldown, varCooldown, ballMinVelX, ballRangeVelX, ballMinVelY, ballRangeVelY, width, height, game){		this.id = -1;		this.type = Enum.Trigger.Type.VENOM_WAVE;	this.x = x;	this.y = y;		this.speed = {		x: speedX,		y: speedY	};		this.cooldown = cooldown;	this.varCooldown = varCooldown;	this.timer = this.cooldown + Math.random()*this.varCooldown;		//Velocity for balls.	this.vel = {		x: ballMinVelX,		y: ballMinVelY,		variation: {			x: ballRangeVelX,			y: ballRangeVelY		}	};		//Compute finalX and finalY.	var velHypo = Math.sqrt(Math.pow(this.speed.x,2)+Math.pow(this.speed.y,2));	this.finalX = this.x + (this.speed.y == 0 ? (distance * (this.speed.x < 0 ? -1 : 1)) : this.speed.x/velHypo*distance);	this.finalY = this.y + (this.speed.x == 0 ? (distance * (this.speed.y < 0 ? -1 : 1)) : this.speed.y/velHypo*distance);		this.width = width;	this.height = height;			this.currentGame = game;	this.stillExists = true;		//Create body.	this.body = new chipmunk.Body(Infinity, Infinity);	this.body.setPos(new chipmunk.Vect(this.x, this.y));		//Assign custom data to body.	this.body.userdata = {		type: Enum.UserData.Type.VENOM_WAVE,		object: this	};		this.shape = this.currentGame.space.addShape(chipmunk.BoxShape(this.body, this.width, this.height));	this.shape.setCollisionType(Enum.Collision.Type.TRIGGER);	this.shape.sensor = true;};cd.Server.VenomWave.prototype.toClient = function(){	return {		id: this.id,		x: this.x,		y: this.y	};};//Called when contact begins.cd.Server.VenomWave.prototype.onBegin = function(player, block){	if(player != null && player.stuckTimer < Constants.Trigger.VenomWave.STUCK_TIME)		player.stuck(Constants.Trigger.VenomWave.STUCK_TIME);};//Called when contact ends.cd.Server.VenomWave.prototype.onEnd = function(player, block){};cd.Server.VenomWave.prototype.update = function(){		this.timer -= this.currentGame.dt;		//Throw a venom ball.	if(this.timer <= 0)	{		var hypo = Math.sqrt(Math.pow(this.speed.x,2) + Math.pow(this.speed.y,2));		var offset = this.width*0.5 + Constants.Trigger.VenomBall.WIDTH*0.5;			var velX = this.vel.x + Math.random()*this.vel.variation.x;		var velY = this.vel.y + Math.random()*this.vel.variation.y;			this.currentGame.managers.TriggerManager.add(new cd.Server.VenomBall(this.x + -(this.speed.y/hypo)*offset*(velX < 0 ? -1 : 1), 																			   this.y + this.speed.x/hypo*offset*(velY < 0 ? -1 : 1), 																			   velX, 																			   velY, 																			   Constants.Trigger.VenomBall.WIDTH, 																			   Constants.Trigger.VenomBall.HEIGHT, 																			   this.currentGame));				this.timer = this.cooldown + Math.random()*this.varCooldown;	}		this.x += this.speed.x;	this.y += this.speed.y;		if((this.speed.x < 0 && this.x < this.finalX) || (this.speed.x > 0 && this.x > this.finalX))		this.x = this.finalX;	if((this.speed.y < 0 && this.y < this.finalY) || (this.speed.y > 0 && this.y > this.finalY))		this.y = this.finalY;	this.body.setPos(new chipmunk.Vect(this.x, this.y));		//Destroyed if it reaches his maximum distance.	if(this.x == this.finalX && this.y == this.finalY)		this.stillExists = false;};cd.Server.VenomWave.prototype.explode = function(){	//Remove physical presence.	this.currentGame.space.removeShape(this.shape);				var data = {		id: this.id	};		//Send info to client.	this.stillExists = false;	io.sockets.in(this.currentGame.id).emit(Constants.Message.DELETE_TRIGGER, data);};