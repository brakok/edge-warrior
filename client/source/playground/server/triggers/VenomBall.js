cd.Server.VenomBall = function(x, y, velX, velY, width, height, game){		this.id = -1;		this.type = Enum.Trigger.Type.VENOM_BALL;	this.x = x;	this.y = y;		this.sendVel = true;		this.width = width;	this.height = height;		this.currentGame = game;	this.stillExists = true;	this.vel = {		x: velX,		y: velY	};		//Create body.	this.body = new chipmunk.Body(Infinity, Infinity);	this.body.setPos(new chipmunk.Vect(this.x, this.y));		//Assign custom data to body.	this.body.userdata = {		type: Enum.UserData.Type.VENOM_BALL,		object: this	};		this.shape = this.currentGame.space.addShape(chipmunk.BoxShape(this.body, this.width, this.height));	this.shape.setCollisionType(Enum.Collision.Type.TRIGGER);	this.shape.sensor = true;};cd.Server.VenomBall.prototype.toClient = function(){	return {		id: this.id,		x: this.x,		y: this.y,		vel: this.vel	};};//Called when contact begins.cd.Server.VenomBall.prototype.onBegin = function(player, block){	if(player != null && player.stuckTimer < Constants.Trigger.VenomBall.STUCK_TIME)		player.stuck(Constants.Trigger.VenomBall.STUCK_TIME);			this.stillExists = false;};//Called when contact ends.cd.Server.VenomBall.prototype.onEnd = function(player, block){};cd.Server.VenomBall.prototype.update = function(){	this.x += this.vel.x;	this.y += this.vel.y;		this.vel.y -= Constants.Trigger.VenomBall.GRAVITY;	this.body.setPos(new chipmunk.Vect(this.x, this.y));};cd.Server.VenomBall.prototype.explode = function(){	//Remove physical presence.	this.currentGame.space.removeShape(this.shape);		var data = {		id: this.id	};		//Send info to client.	this.stillExists = false;	io.sockets.in(this.currentGame.id).emit(Constants.Message.DELETE_TRIGGER, data);};